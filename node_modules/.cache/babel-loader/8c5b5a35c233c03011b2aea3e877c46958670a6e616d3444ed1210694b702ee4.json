{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TED\\\\Desktop\\\\FrontClass\\\\resource\\\\react\\\\test\\\\src\\\\components\\\\career\\\\careerRow.js\",\n  _s = $RefreshSig$();\nimport DeleteOutlineIcon from \"@mui/icons-material/DeleteOutline\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport axios from \"axios\";\nimport { useContext, useRef, useState } from \"react\";\nimport { UserContext } from \"../../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CareerRow = props => {\n  _s();\n  // 만일 isEdit에 true가 들어있으면 해당 행이 수정 상태임 을 의미하고\n  // isEdit에 false가 들어있으면 해당 행이 수정상태가 아님 을 의미한다\n  const [isEdit, setIsEdit] = useState(false);\n  const companyInputRef = useRef(null);\n  const positionInputRef = useRef(null);\n  const startDateInputRef = useRef(null);\n  const endDateInputRef = useRef(null);\n  const {\n    accessToken\n  } = useContext(UserContext);\n  const dateFormat = date => {\n    // '2023년10월01일' --> '2023-10-01'\n    // / /g --> 모든 띄어쓰기 공백 을 의미\n    return date.replace(\"년\", \"-\").replace(\"월\", \"-\").replace(\"일\", \"\").replace(/ /g, \"\");\n  };\n\n  // props.career = e;\n  // props.checkedRowId\n  const e = props.career;\n  const {\n    checkedRowId,\n    onSelect,\n    onDeleteRow\n  } = props;\n\n  // 상태를 수정상태로 변경해주는 함수\n  const onEditState = () => {\n    setIsEdit(true);\n  };\n  const onEditClick = async id => {\n    // id에는 수정할 행의 id가 들어있음\n    // 수정하기 버튼 클릭시 실행될 함수\n    // 1. 사용자가 입력한 company, postion, startDate, endDate 가져오기\n    const company = companyInputRef.current.value;\n    const position = positionInputRef.current.value;\n    const startDate = startDateInputRef.current.value;\n    const endDate = endDateInputRef.current.value;\n\n    // 유효성 검사\n    if (company === '') {\n      alert('회사명은 필수입력입니다');\n      return;\n    }\n    if (position === '') {\n      alert('직책은 필수입력 입니다');\n      return;\n    }\n    if (startDate === '') {\n      alert('시작일은 필수입력 입니다');\n      return;\n    }\n    const today = new Date();\n    const startDateTmp = new Date(startDate);\n    if (startDateTmp > today) {\n      alert('시작일은 오늘 날짜를 넘어가면 안됩니다');\n      return;\n    }\n    if (endDate !== '') {\n      const endDateTmp = new Date(endDate);\n      if (endDateTmp < startDateTmp) {\n        alert('종료일은 시작일보다 이전으로 설정할 수 없습니다');\n        return;\n      }\n      if (endDateTmp > today) {\n        alert('종료일은 오늘 날짜를 넘어가면 안됩니다');\n        return;\n      }\n    }\n\n    // 유효한 값들이 입력되었음을 확인한다면\n    // express 서버에 입력한 값들을 전달하여 수정 요청하기\n    try {\n      await axios.put('/api/careers', {\n        company,\n        position,\n        startDate,\n        endDate,\n        id\n      }, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      alert('수정완료~!');\n      // 수정상태를 false 로바꾸기\n      setIsEdit(false);\n      // e 안에 있는 company, position , startDate, endDate 변경\n      e.company = company;\n      e.position = position;\n      e.start_date = startDate;\n      e.end_date = endDate;\n    } catch (err) {\n      console.log(err);\n      alert('오류발생');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: checkedRowId.includes(e.id),\n        onChange: () => {\n          onSelect(e.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      onClick: onEditState,\n      children: isEdit ? /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: companyInputRef,\n        defaultValue: e.company\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }, this) : e.company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      onClick: onEditState,\n      children: isEdit ? /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: positionInputRef,\n        defaultValue: e.position\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 19\n      }, this) : e.position\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      onClick: onEditState,\n      style: {\n        display: \"flex\"\n      },\n      children: [isEdit ? /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: startDateInputRef,\n        defaultValue: dateFormat(e.start_date),\n        type: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this) : e.start_date, \"-\", isEdit ? /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: endDateInputRef,\n        type: \"date\",\n        defaultValue: dateFormat(e.end_date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this) : e.end_date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      onClick: () => {\n        if (isEdit) {\n          onEditClick(e.id);\n        } else {\n          onDeleteRow(e.id);\n        }\n      },\n      style: {\n        cursor: \"pointer\"\n      },\n      children: isEdit ? /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(DeleteOutlineIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(CareerRow, \"xB2KP5Z4M0t2+TRR27BIFHE6Pn8=\");\n_c = CareerRow;\nexport default CareerRow;\nvar _c;\n$RefreshReg$(_c, \"CareerRow\");","map":{"version":3,"names":["DeleteOutlineIcon","EditIcon","axios","useContext","useRef","useState","UserContext","jsxDEV","_jsxDEV","CareerRow","props","_s","isEdit","setIsEdit","companyInputRef","positionInputRef","startDateInputRef","endDateInputRef","accessToken","dateFormat","date","replace","e","career","checkedRowId","onSelect","onDeleteRow","onEditState","onEditClick","id","company","current","value","position","startDate","endDate","alert","today","Date","startDateTmp","endDateTmp","put","headers","Authorization","start_date","end_date","err","console","log","children","type","checked","includes","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","defaultValue","style","display","cursor","_c","$RefreshReg$"],"sources":["C:/Users/TED/Desktop/FrontClass/resource/react/test/src/components/career/careerRow.js"],"sourcesContent":["import DeleteOutlineIcon from \"@mui/icons-material/DeleteOutline\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport axios from \"axios\";\r\nimport { useContext, useRef, useState } from \"react\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nconst CareerRow = (props) => {\r\n  // 만일 isEdit에 true가 들어있으면 해당 행이 수정 상태임 을 의미하고\r\n  // isEdit에 false가 들어있으면 해당 행이 수정상태가 아님 을 의미한다\r\n  const [isEdit, setIsEdit] = useState(false);\r\n\r\n  const companyInputRef = useRef(null);\r\n  const positionInputRef = useRef(null);\r\n  const startDateInputRef = useRef(null);\r\n  const endDateInputRef = useRef(null);\r\n\r\n  const {accessToken} = useContext(UserContext);\r\n\r\n  const dateFormat = (date) => {\r\n    // '2023년10월01일' --> '2023-10-01'\r\n    // / /g --> 모든 띄어쓰기 공백 을 의미\r\n    return date\r\n      .replace(\"년\", \"-\")\r\n      .replace(\"월\", \"-\")\r\n      .replace(\"일\", \"\")\r\n      .replace(/ /g, \"\");\r\n  };\r\n\r\n  // props.career = e;\r\n  // props.checkedRowId\r\n  const e = props.career;\r\n  const { checkedRowId, onSelect, onDeleteRow } = props;\r\n\r\n  // 상태를 수정상태로 변경해주는 함수\r\n  const onEditState = () => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  const onEditClick = async ( id ) => {\r\n    // id에는 수정할 행의 id가 들어있음\r\n    // 수정하기 버튼 클릭시 실행될 함수\r\n    // 1. 사용자가 입력한 company, postion, startDate, endDate 가져오기\r\n    const company = companyInputRef.current.value;\r\n    const position = positionInputRef.current.value;\r\n    const startDate = startDateInputRef.current.value;\r\n    const endDate = endDateInputRef.current.value;\r\n\r\n    // 유효성 검사\r\n    if(company === ''){\r\n        alert('회사명은 필수입력입니다');\r\n        return;\r\n    }\r\n    if(position === ''){\r\n        alert('직책은 필수입력 입니다');\r\n        return;\r\n    }\r\n    if(startDate === ''){\r\n        alert('시작일은 필수입력 입니다');\r\n        return;\r\n    }\r\n    const today = new Date();\r\n    const startDateTmp = new Date(startDate);\r\n\r\n    if(startDateTmp > today){\r\n        alert('시작일은 오늘 날짜를 넘어가면 안됩니다');\r\n        return;\r\n    }\r\n\r\n    if(endDate !== ''){\r\n        const endDateTmp = new Date(endDate);\r\n        if(endDateTmp < startDateTmp){\r\n            alert('종료일은 시작일보다 이전으로 설정할 수 없습니다')\r\n            return;\r\n        }\r\n\r\n        if(endDateTmp > today){\r\n            alert('종료일은 오늘 날짜를 넘어가면 안됩니다');\r\n            return;\r\n        }\r\n    }\r\n\r\n    // 유효한 값들이 입력되었음을 확인한다면\r\n    // express 서버에 입력한 값들을 전달하여 수정 요청하기\r\n    try{\r\n        await axios.put('/api/careers' , {company, position, startDate, endDate, id}, \r\n            {headers : {Authorization : `Bearer ${accessToken}`}}\r\n        )\r\n        alert('수정완료~!');\r\n        // 수정상태를 false 로바꾸기\r\n        setIsEdit(false);\r\n        // e 안에 있는 company, position , startDate, endDate 변경\r\n        e.company = company;\r\n        e.position = position;\r\n        e.start_date = startDate;\r\n        e.end_date = endDate;\r\n    }catch(err){\r\n        console.log(err);\r\n        alert('오류발생');\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={checkedRowId.includes(e.id)}\r\n          onChange={() => {\r\n            onSelect(e.id);\r\n          }}\r\n        />\r\n      </td>\r\n      <td onClick={onEditState}>\r\n        {isEdit ? <input ref={companyInputRef} defaultValue={e.company} /> : e.company}\r\n      </td>\r\n      <td onClick={onEditState}>\r\n        {isEdit ? <input ref={positionInputRef} defaultValue={e.position} /> : e.position}\r\n      </td>\r\n      <td onClick={onEditState} style={{ display: \"flex\" }}>\r\n        {isEdit ? (\r\n          <input ref={startDateInputRef} defaultValue={dateFormat(e.start_date)} type=\"date\" />\r\n        ) : (\r\n          e.start_date\r\n        )}\r\n        -\r\n        {isEdit ? (\r\n          <input ref={endDateInputRef} type=\"date\" defaultValue={dateFormat(e.end_date)} />\r\n        ) : (\r\n          e.end_date\r\n        )}\r\n      </td>\r\n      <td\r\n        onClick={() => { \r\n            if(isEdit){\r\n                onEditClick(e.id);\r\n            } else{\r\n                onDeleteRow(e.id);\r\n            }\r\n        }}\r\n        style={{\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        {isEdit ? <EditIcon /> : <DeleteOutlineIcon />}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default CareerRow;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}